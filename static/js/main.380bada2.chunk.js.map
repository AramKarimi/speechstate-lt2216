{"version":3,"sources":["tdmClient.ts","jaicpClient.ts","dmColourChanger.ts","index.tsx"],"names":["send","actions","assign","choose","startSession","tdmRequest","requestBody","fetch","Request","process","method","headers","body","JSON","stringify","then","data","json","tdmAssign","sessionId","_ctx","event","session","session_id","tdmAll","tdmUtterance","output","utterance","tdmVisualOutputInfo","visual_output","visual_information","tdmExpectedAlternatives","context","expected_input","alternatives","tdmPassivity","expected_passivity","tdmActions","maybeAlternatives","cond","type","tdmDmMachine","initial","states","init","on","CLICK","tdm","entry","audioCtx","window","AudioContext","webkitAudioContext","start","invoke","id","src","_evt","onDone","target","onError","utter","RECOGNISED","SELECT","hapticInput","value","TIMEOUT","prompt","ENDSPEECH","_evnt","some","item","name","ask","next","hypotheses","recResult","nextHaptic","expression","passivity","fail","sessionID","Math","random","toString","substr","sayColour","ttsAgenda","answer","say","text","_context","dmMachine","welcome","stop","always","repaint","dm","cancel","REGION","inspect","url","iframe","machine","Machine","gui","micOnly","SHOW_ALTERNATIVES","showAlternatives","asrtts","getToken","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","voice","find","v","test","console","error","TTS_READY","TTS_ERROR","idle","LISTEN","SPEAK","recognising","exit","ASRRESULT","noinput","delay","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","recStart","asEffect","asr","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","filter","o","map","i","onClick","semantic_expression","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.380bada2.chunk.js","sourcesContent":["import { MachineConfig, actions, AssignAction } from \"xstate\";\n\nconst { send, assign, choose } = actions;\n\n\nconst tdmEndpoint = process.env.REACT_APP_TDM_ENDPOINT || \"https://sourdough-for-dummies-orchestration-pipeline.eu2.ddd.tala.cloud/interact\"\nconst tdmSession = {\n    \"session\": {\n        \"my_frontend\": {\n            \"user_id\": \"speechstate\",\n            \"position\": {\n                \"latitude\": \"57.699188\",\n                \"longitude\": \"11.948313\"\n            }\n        }\n    }\n}\n\nconst startSession = {\n    \"version\": \"3.3\",\n    \"session\": tdmSession,\n    \"request\": {\n        \"start_session\": {}\n    }\n}\n\nconst passivity = (sessionId: string) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"passivity\": {}\n    }\n})\n\nconst nlInput = (sessionId: string, hypotheses: Hypothesis[]) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"natural_language_input\": {\n            \"modality\": \"speech\",\n            \"hypotheses\": hypotheses\n        }\n    }\n})\n\nconst hapticInput = (sessionId: string, expression: string) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"semantic_input\": {\n            \"interpretations\": [{\n                \"modality\": \"haptic\",\n                \"moves\": [{\n                    \"perception_confidence\": 1,\n                    \"understanding_confidence\": 1,\n                    \"semantic_expression\": expression\n                }]\n            }]\n        }\n    }\n})\n\nconst tdmRequest = (requestBody: any) => (fetch(new Request(tdmEndpoint, {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n})).then(data => data.json()))\n\nconst tdmAssign: AssignAction<SDSContext, any> = assign({\n    sessionId: (_ctx, event) => event.data.session.session_id,\n    tdmAll: (_ctx, event) => event.data,\n    tdmUtterance: (_ctx, event) => event.data.output.utterance,\n    tdmVisualOutputInfo: (_ctx, event) => (event.data.output.visual_output || [{}])[0].visual_information,\n    tdmExpectedAlternatives: (_ctx, event) => (event.data.context.expected_input || {}).alternatives,\n    tdmPassivity: (_ctx, event) => event.data.output.expected_passivity,\n    tdmActions: (_ctx, event) => event.data.output.actions,\n})\n\n\nconst maybeAlternatives = choose<SDSContext, SDSEvent>([\n    {\n        cond: (context) => { return (context.tdmExpectedAlternatives || [{}])[0].visual_information },\n        actions: [send({ type: \"SHOW_ALTERNATIVES\" })]\n    },\n])\n\nexport const tdmDmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'tdm'\n            }\n        },\n        tdm: {\n            entry: assign({ audioCtx: (_ctx) => new ((<any>window).AudioContext || (<any>window).webkitAudioContext)() }),\n            initial: 'start',\n            states: {\n                start: {\n                    invoke: {\n                        id: \"startSession\",\n                        src: (_ctx, _evt) => tdmRequest(startSession),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                utter: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: 'next',\n                        SELECT: {\n                            target: 'nextHaptic',\n                            actions: assign({ hapticInput: (_ctx, event) => event.value })\n                        },\n                        TIMEOUT: 'passivity'\n                    },\n                    states: {\n                        prompt: {\n                            entry: [\n                                maybeAlternatives,\n                                send((context: SDSContext) => ({\n                                    type: \"SPEAK\", value: context.tdmUtterance\n                                }))],\n                            on: {\n                                ENDSPEECH:\n                                    [\n                                        {\n                                            target: '#root.dm.init',\n                                            cond: (context, _evnt) => context.tdmActions.some((item: any) => item.name === 'EndSession')\n                                        },\n                                        { target: 'ask' }\n                                    ]\n\n                            }\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                    }\n                },\n                next: {\n                    invoke: {\n                        id: \"nlInput\",\n                        src: (context, _evt) => tdmRequest(nlInput(context.sessionId, context.recResult)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                nextHaptic: {\n                    invoke: {\n                        id: \"hapticInput\",\n                        src: (context, _evt) => tdmRequest(hapticInput(context.sessionId, context.hapticInput)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                passivity: {\n                    invoke: {\n                        id: \"passivity\",\n                        src: (context, _evt) => tdmRequest(passivity(context.sessionId)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n\n                },\n                fail: {}\n            },\n        },\n    },\n});\n","import { MachineConfig, send, assign } from \"xstate\";\n\nconst jaicpToken = 'NRBTzSQe:69ae9a334ee112ff9a006af3639ed243ec38e431'\nconst jaicpEndpoint = \"https://bot.jaicp.com/chatapi/\" + jaicpToken\n\nconst ID = function() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal. from https://gist.github.com/gordonbrander/2230317\n    return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nconst sessionID = ID()\n\nconst jaicpRequest = (query: string) => (fetch(new Request(jaicpEndpoint, {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"clientId\": \"speechstate_\" + sessionID,\n        \"query\": query,\n    })\n})).then(data => data.json()))\n\n\nexport const jaicpDmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            entry: assign({\n                ttsAgenda: (_ctx, event) => \"Привет! Спроси меня что-нибудь.\"\n            }),\n            on: {\n                CLICK: 'jaicp'\n            }\n        },\n        jaicp: {\n            initial: 'utter',\n            states: {\n                utter: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: send((context: SDSContext) => ({\n                                type: \"SPEAK\", value: context.ttsAgenda\n                            })),\n                            on: { ENDSPEECH: 'ask' },\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                    },\n                    on: {\n                        RECOGNISED: 'next',\n                        // TIMEOUT: 'passivity'\n                    },\n                },\n                next: {\n                    invoke: {\n                        id: \"nlInput\",\n                        src: (context, _evt) => jaicpRequest(context.recResult[0].utterance),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions:\n                                    assign({\n                                        ttsAgenda: (_ctx, event) => event.data.data.answer,\n                                    }),\n                                cond: (_ctx, event) => event.data.data.answer !== \"\"\n                            },\n                            {\n                                target: '#root.dm.fail'\n                            }\n                        ],\n                        onError: { target: '#root.dm.fail' }\n                    }\n\n                },\n            },\n        },\n        fail: {}\n    },\n});\n","import { MachineConfig, send, Action } from \"xstate\";\n\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult[0].utterance}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    // { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'repaint' }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me the colour\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n            }\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n        repaint: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: sayColour,\n                    on: { ENDSPEECH: 'repaint' }\n                },\n                repaint: {\n                    entry: 'changeColour',\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { tdmDmMachine } from \"./tdmClient\";\nimport { jaicpDmMachine } from \"./jaicpClient\";\nimport { dmMachine } from \"./dmColourChanger\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\nlet dm = dmMachine\nif (process.env.REACT_APP_BACKEND === 'TDM') {\n    dm = tdmDmMachine\n} else if (process.env.REACT_APP_BACKEND === 'JAICP') {\n    dm = jaicpDmMachine\n}\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dm\n        },\n\n        gui: {\n            initial: 'micOnly',\n            states: {\n                micOnly: {\n                    on: { SHOW_ALTERNATIVES: 'showAlternatives' },\n                },\n                showAlternatives: {\n                    on: { SELECT: 'micOnly' },\n                }\n            }\n        },\n\n        asrtts: {\n            initial: 'getToken',\n            states: {\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                \"ponyfill.audioContext\": context.audioCtx,\n                                \"audioContext\": context.audioCtx,\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"name\") || {}).value;\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\n        .find((el: any) => el.attribute === \"image\") || {}).value;\n    var circleClass = \"circle\"\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            break;\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            promptText = \"Click to continue\"\n            break;\n        case props.state.matches({ asrtts: 'recognising' }):\n            circleClass = \"circle-recognising\"\n            promptText = promptText || 'Listening...'\n            break;\n        case props.state.matches({ asrtts: 'speaking' }):\n            circleClass = \"circle-speaking\"\n            promptText = promptText || 'Speaking...'\n            break;\n        case props.state.matches({ dm: 'init' }):\n            promptText = \"Click to start!\"\n            circleClass = \"circle-click\"\n            break;\n        default:\n            promptText = promptText || '\\u00A0'\n    }\n    return (\n        <div className=\"control\">\n            <figure className=\"prompt\">\n                {promptImage &&\n                    <img src={promptImage}\n                        alt={promptText} />}\n            </figure>\n            <div className=\"status\">\n                <button type=\"button\" className={circleClass}\n                    style={{}} {...props}>\n                </button>\n                <div className=\"status-text\">\n                    {promptText}\n                </div>\n            </div>\n        </div>);\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect((context) => {\n                context.asr.start()\n                /* console.log('Ready to receive a voice input.'); */\n            }),\n            recStop: asEffect((context) => {\n                context.asr.abort()\n                /* console.log('Recognition stopped.'); */\n            }),\n            ttsStart: asEffect((context) => {\n                console.log(context)\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                console.log(\"S>\", context.ttsAgenda)\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                /* console.log('TTS STOP...'); */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            \"ponyfill.audioContext\": context.audioCtx,\n                            \"audioContext\": context.audioCtx,\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    switch (true) {\n        default:\n            return (\n                <div className=\"App\">\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                    <div className=\"select-wrapper\">\n                        <div className=\"select\">\n                            {figureButtons}\n                        </div>\n                    </div>\n                </div>\n            )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}