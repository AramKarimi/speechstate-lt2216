{"version":3,"sources":["tdmClient.ts","index.tsx"],"names":["startSession","tdmRequest","requestBody","fetch","Request","proxyurl","method","headers","body","JSON","stringify","then","data","json","dmMachine","initial","states","init","on","CLICK","tdm","start","invoke","id","src","_ctx","_evt","onDone","target","actions","assign","sessionId","event","session","session_id","tdmUtterance","output","utterance","tdmPassivity","expected_passivity","tdmActions","cond","onError","utter","RECOGNISED","TIMEOUT","prompt","entry","send","context","type","value","ENDSPEECH","_evnt","some","item","name","ask","next","hypotheses","recResult","passivity","fail","myTTS","speechSynthesis","myTTSUtterance","SpeechSynthesisUtterance","TOKEN_ENDPOINT","REGION","a","process","response","text","authorizationToken","createPonyfill","credentials","region","ponyfill","console","log","inspect","url","iframe","cancel","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","_context","ttsAgenda","recognising","exit","ASRRESULT","noinput","delay","STARTSPEECH","inprogress","match","speaking","recLogResult","test","logIntent","nluData","intent","ReactiveButton","props","state","matches","className","style","animation","App","React","createSpeechRecognitionPonyfill","AzureSpeechRecognition","SpeechRecognition","applyPolyfill","getRecognition","onresult","results","result","isFinal","transcript","confidence","fetchASRTTS","useMachine","devTools","recStart","asEffect","startListening","continuous","language","recStop","stopListening","ttsStart","voices","getVoices","voice","find","onend","speak","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM"],"mappings":"ofAgBMA,EAAe,CACjB,QAAW,MACX,QAde,CACf,QAAW,CACP,YAAe,CACX,QAAW,cACX,SAAY,CACR,SAAY,YACZ,UAAa,gBASzB,QAAW,CACP,cAAiB,KAwBnBC,EAAa,SAACC,GAAD,OAAuBC,MAAM,IAAIC,QAAQC,uHAAwB,CAChFC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUR,MACrBS,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAETC,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,QAGfC,IAAK,CACDL,QAAS,QACTC,OAAQ,CACJK,MAAO,CACHC,OAAQ,CACJC,GAAI,eACJC,IAAK,SAACC,EAAMC,GAAP,OAAgBzB,EAAWD,IAChC2B,OAAQ,CACJ,CACIC,OAAQ,QACRC,QAASC,YAAO,CACZC,UAAW,SAACN,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKqB,QAAQC,YAC/CC,aAAc,SAACV,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOC,WACjDC,aAAc,SAACb,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOG,oBACjDC,WAAY,SAACf,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOP,WAEnDY,KAAM,SAAChB,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,SAEtC,CACIR,OAAQ,SAGhBc,QAAS,CAAEd,OAAQ,UAG3Be,MAAO,CACH5B,QAAS,SACTG,GAAI,CACA0B,WAAY,OACZC,QAAS,aAEb7B,OAAQ,CACJ8B,OAAQ,CACJC,MAAOC,aAAK,SAACC,GAAD,MAA0B,CAClCC,KAAM,QAASC,MAAOF,EAAQd,iBAElCjB,GAAI,CACAkC,UACI,CACI,CACIxB,OAAQ,gBACRa,KAAM,SAACQ,EAASI,GAAV,OAAoBJ,EAAQT,WAAWc,MAAK,SAACC,GAAD,MAA6B,eAAdA,EAAKC,UAE1E,CAAE5B,OAAQ,UAK1B6B,IAAK,CACDV,MAAO,CACHC,YAAK,cAMrBU,KAAM,CACFpC,OAAQ,CACJC,GAAI,UACJC,IAAK,SAACyB,EAASvB,GAAV,OAAmBzB,GAvF/B8B,EAuFkDkB,EAAQlB,UAvFvC4B,EAuFkDV,EAAQW,UAvF5B,CAC9D,QAAW,MACX,QAAW,CAAE,WAAc7B,GAC3B,QAAW,CACP,uBAA0B,CACtB,SAAY,SACZ,WAAc4B,OANV,IAAC5B,EAAmB4B,GAwFZhC,OAAQ,CACJ,CACIC,OAAQ,QACRC,QACIC,YAAO,CACHK,aAAc,SAACV,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOC,WACjDC,aAAc,SAACb,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOG,oBACjDC,WAAY,SAACf,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOP,WAEvDY,KAAM,SAAChB,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,SAEtC,CACIR,OAAQ,SAGhBc,QAAS,CAAEd,OAAQ,UAI3BiC,UAAW,CACPvC,OAAQ,CACJC,GAAI,YACJC,IAAK,SAACyB,EAASvB,GAAV,OAAmBzB,EAtHN,CACtC,QAAW,MACX,QAAW,CAAE,WAoHoDgD,EAAQlB,WAnHzE,QAAW,CACP,UAAa,OAmHGJ,OAAQ,CACJ,CACIC,OAAQ,QACRC,QAASC,YAAO,CACZK,aAAc,SAACV,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOC,WACjDC,aAAc,SAACb,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOG,oBACjDC,WAAY,SAACf,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,OAAOP,WAEnDY,KAAM,SAAChB,EAAMO,GAAP,OAAiBA,EAAMpB,KAAKwB,SAEtC,CACIR,OAAQ,SAGhBc,QAAS,CAAEd,OAAQ,UAI3BkC,KAAM,O,QCnJlBC,EAAQC,gBACRC,EAAiBC,yBAEfC,EAAiB,sEACjBC,EAAS,cAEf,sBAAC,oCAAAC,EAAA,+EAE8BlE,MAAMgE,EAAgB,CACzC7D,OAAQ,OACRC,QAAS,CAAE,4BAA6B+D,sCAJnD,cAEaC,EAFb,gBAMwCA,EAASC,OANjD,cAMaC,EANb,gBAQ8BC,IAAe,CAClCC,YAAa,CACTC,OAAQR,EACRK,mBAAoBA,KAXnC,OAQaI,EARb,OAceb,EAA8Ca,EAA9Cb,gBAAiBE,EAA6BW,EAA7BX,yBACzBH,EAAQC,EACRC,EAAiBC,EAhBxB,kDAiBiBY,QAAQC,IAAR,MAjBjB,yDAAD,GAqBAC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAGZ,IAAQlC,EAAiBnB,IAAjBmB,KAAMmC,EAAWtD,IAAXsD,OAIRC,EAAUC,YAAmC,CAC/C9D,GAAI,OACJ2B,KAAM,WACNlC,OAAQ,CACJsE,GAAG,eACIxE,GAGPyE,OAAQ,CACJxE,QAAS,OACTC,OAAQ,CACJwE,KAAM,CACFtE,GAAI,CACAuE,OAAQ,cACRC,MAAO,CACH9D,OAAQ,WACRC,QAASC,aAAO,SAAC6D,EAAU3D,GAAY,MAAO,CAAE4D,UAAW5D,EAAMmB,aAI7E0C,YAAa,CACT9E,QAAS,UACTgC,MAAO,WACP+C,KAAM,UACN5E,GAAI,CACA6E,UAAW,CACPlE,QAAS,CAAC,eACNC,aAAO,SAAC6D,EAAU3D,GACd,MAAO,CACH4B,UAAW5B,EAAMmB,WAG7BvB,OAAQ,UAEZgB,WAAY,QAEhB5B,OAAQ,CACJgF,QAAS,CACLjD,MAAOC,EACH,CAAEE,KAAM,WACR,CAAE+C,MAAO,SAAChD,GAAD,OAAc,KAAoD1B,GAAI,YAEnFL,GAAI,CACA2B,QAAS,oBACTqD,YAAa,cAEjBJ,KAAMX,EAAO,YAEjBgB,WAAY,GAEZC,MAAO,CACHrD,MAAOC,EAAK,iBAIxBqD,SAAU,CACNtD,MAAO,WACP7B,GAAI,CACAkC,UAAW,aAO/B,CACIvB,QAAS,CACLyE,aAAc,SAACrD,GAEX6B,QAAQC,IAAI,WAAa9B,EAAQW,UAAU,GAAlB,YAE7B2C,KAAM,WACFzB,QAAQC,IAAI,SAEhByB,UAAW,SAACvD,GAER6B,QAAQC,IAAI,kBAAoB9B,EAAQwD,QAAQC,OAAOlD,UAUjEmD,EAAiB,SAACC,GACpB,QAAQ,GACJ,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,gBAC/B,OACI,gDAAQrC,KAAK,SAAS6D,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,uBAA4BL,GADpD,+BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAEvB,OAAQ,aAC/B,OACI,gDAAQrC,KAAK,SAAS6D,UAAU,gBAC5BC,MAAO,CAAEC,UAAW,0BAA+BL,GADvD,8BAKR,KAAKA,EAAMC,MAAMC,QAAQ,CAAExB,GAAI,SAC3B,OACI,gDAAQpC,KAAK,SAAS6D,UAAU,iBACxBH,GADR,2CAMR,QACI,OACI,gDAAQ1D,KAAK,SAAS6D,UAAU,iBAAoBH,GAApD,mCAShB,SAASM,IAYLC,aAAgB,WAAM,4CAClB,kCAAA9C,EAAA,sEAC2BlE,MAAMgE,EAAgB,CACzC7D,OAAQ,OACRC,QAAS,CAAE,4BAA6B+D,sCAHhD,cACUC,EADV,gBAKqCA,EAASC,OAL9C,cAKUC,EALV,gBAQoB2C,IAAgC,CACpCzC,YAAa,CACTC,OAAQR,EACRK,mBAAoBA,KAXxC,gBAO6B4C,EAP7B,EAOUC,kBAONA,IAAkBC,cAAcF,GACpBC,IAAkBE,iBACzBC,SAAW,SAASzF,GACrB8C,QAAQC,IAAI/C,EAAM0F,SAClB,IAAIC,EAAS3F,EAAM0F,QAAQ,GACvBC,EAAOC,QACP5E,EAAK,CACDE,KAAM,YAAaC,MACf,CAAC,CACG,UAAawE,EAAO,GAAGE,WACvB,WAAcF,EAAO,GAAGG,eAIpC9E,EAAK,CAAEE,KAAM,iBA5BzB,6CADkB,uBAAC,WAAD,wBAiClB6E,KACD,IAIH,MAAwBC,YAAW5C,EAAS,CACxC6C,UAAU,EACVpG,QAAS,CACLqG,SAAUC,aAAS,WACfrD,QAAQC,IAAI,mCAnDpBuC,IAAkBc,eAAe,CAC7BC,YAAY,EACZC,SAAU,aAqDVC,QAASJ,aAAS,WACdrD,QAAQC,IAAI,wBAlDpBuC,IAAkBkB,mBAqDdC,SAAUN,aAAS,SAAClF,GAChB6B,QAAQC,IAAI,eACZ,IAAM2D,EAAS3E,EAAM4E,YACrB7D,QAAQC,IAAI2D,GACZ,IAAMrG,EAAY,IAAI4B,EAAehB,EAAQ2C,WAC7CvD,EAAUuG,MAAQF,EAAOG,MAAK,SAAAD,GAAK,MAAI,yBAAoBrC,KAAKqC,EAAMpF,SACtEnB,EAAUyG,MAAQ,kBAAM9F,EAAK,cAC7Be,EAAMgF,MAAM1G,MAEhB2G,UAAWb,aAAS,WAChBrD,QAAQC,IAAI,eAEZf,gBAAgBmB,eAxB5B,mBAAO8D,EAAP,KAAgBjG,EAAhB,KAkCA,OACI,qBAAK+D,UAAU,MAAf,SACI,cAAC,EAAD,CAAgBF,MAAOoC,EAASC,QAAS,kBAAMlG,EAAK,cAOhE,IAAMmG,EAAcC,SAASC,eAAe,QAC5CC,SACI,cAACpC,EAAD,IACAiC,K","file":"static/js/main.85240d29.chunk.js","sourcesContent":["import { MachineConfig, send, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst tdmEndpoint = \"https://sourdough-for-dummies-orchestration-pipeline.eu2.ddd.tala.cloud/interact\"\nconst tdmSession = {\n    \"session\": {\n        \"my_frontend\": {\n            \"user_id\": \"speechstate\",\n            \"position\": {\n                \"latitude\": \"57.699188\",\n                \"longitude\": \"11.948313\"\n            }\n        }\n    }\n}\n\nconst startSession = {\n    \"version\": \"3.3\",\n    \"session\": tdmSession,\n    \"request\": {\n        \"start_session\": {}\n    }\n}\n\nconst passivity = (sessionId: string) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"passivity\": {}\n    }\n})\n\nconst nlInput = (sessionId: string, hypotheses: Hypothesis[]) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"natural_language_input\": {\n            \"modality\": \"speech\",\n            \"hypotheses\": hypotheses\n        }\n    }\n})\n\n\nconst tdmRequest = (requestBody: any) => (fetch(new Request(proxyurl + tdmEndpoint, {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n})).then(data => data.json()))\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'tdm'\n            }\n        },\n        tdm: {\n            initial: 'start',\n            states: {\n                start: {\n                    invoke: {\n                        id: \"startSession\",\n                        src: (_ctx, _evt) => tdmRequest(startSession),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: assign({\n                                    sessionId: (_ctx, event) => event.data.session.session_id,\n                                    tdmUtterance: (_ctx, event) => event.data.output.utterance,\n                                    tdmPassivity: (_ctx, event) => event.data.output.expected_passivity,\n                                    tdmActions: (_ctx, event) => event.data.output.actions,\n                                }),\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                utter: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: 'next',\n                        TIMEOUT: 'passivity'\n                    },\n                    states: {\n                        prompt: {\n                            entry: send((context: SDSContext) => ({\n                                type: \"SPEAK\", value: context.tdmUtterance\n                            })),\n                            on: {\n                                ENDSPEECH:\n                                    [\n                                        {\n                                            target: '#root.dm.init',\n                                            cond: (context, _evnt) => context.tdmActions.some((item: any) => item.name === 'EndSession')\n                                        },\n                                        { target: 'ask' }\n                                    ]\n\n                            }\n                        },\n                        ask: {\n                            entry: [\n                                send('LISTEN'),\n\n                            ],\n                        },\n                    }\n                },\n                next: {\n                    invoke: {\n                        id: \"nlInput\",\n                        src: (context, _evt) => tdmRequest(nlInput(context.sessionId, context.recResult)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions:\n                                    assign({\n                                        tdmUtterance: (_ctx, event) => event.data.output.utterance,\n                                        tdmPassivity: (_ctx, event) => event.data.output.expected_passivity,\n                                        tdmActions: (_ctx, event) => event.data.output.actions,\n                                    }),\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n\n                },\n                passivity: {\n                    invoke: {\n                        id: \"passivity\",\n                        src: (context, _evt) => tdmRequest(passivity(context.sessionId)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: assign({\n                                    tdmUtterance: (_ctx, event) => event.data.output.utterance,\n                                    tdmPassivity: (_ctx, event) => event.data.output.expected_passivity,\n                                    tdmActions: (_ctx, event) => event.data.output.actions,\n                                }),\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n\n                },\n                fail: {}\n            },\n        },\n    },\n});\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport SpeechRecognition from 'react-speech-recognition';\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createPonyfill from 'web-speech-cognitive-services/lib/SpeechServices';\n\nimport { dmMachine } from \"./tdmClient\";\n/* import { dmMachine } from \"./dmColourChanger\"; */\n\nvar myTTS = speechSynthesis;\nvar myTTSUtterance = SpeechSynthesisUtterance;\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\n(async function() {\n    try {\n        const response = await fetch(TOKEN_ENDPOINT, {\n            method: 'POST',\n            headers: { 'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY! }\n        });\n        const authorizationToken = await response.text();\n\n        const ponyfill = await createPonyfill({\n            credentials: {\n                region: REGION,\n                authorizationToken: authorizationToken,\n            }\n        });\n        const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n        myTTS = speechSynthesis;\n        myTTSUtterance = SpeechSynthesisUtterance;\n    } catch (e) { console.log(e) }\n})();\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nconst { send, cancel } = actions;\n\nconst defaultPassivity = 5\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'noinput',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                    },\n                    states: {\n                        noinput: {\n                            entry: send(\n                                { type: 'TIMEOUT' },\n                                { delay: (context) => (1000 * (defaultPassivity || context.tdmPassivity)), id: 'timeout' }\n                            ),\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult[0][\"utterance\"]);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        case props.state.matches({ dm: 'fail' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    {...props}>\n                    FAILURE! reload the page\n                </button>\n            );\n\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\n\n\nfunction App() {\n\n    const startListening = () => {\n        SpeechRecognition.startListening({\n            continuous: true,\n            language: 'en-US'\n        });\n    }\n    const stopListening = () => {\n        SpeechRecognition.stopListening()\n    }\n\n    React.useEffect(() => {\n        async function fetchASRTTS() {\n            const response = await fetch(TOKEN_ENDPOINT, {\n                method: 'POST',\n                headers: { 'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY! }\n            });\n            const authorizationToken = await response.text();\n            const\n                { SpeechRecognition: AzureSpeechRecognition }\n                    = await createSpeechRecognitionPonyfill({\n                        credentials: {\n                            region: REGION,\n                            authorizationToken: authorizationToken,\n                        }\n                    });\n            SpeechRecognition.applyPolyfill(AzureSpeechRecognition)\n            const rec = SpeechRecognition.getRecognition()\n            rec!.onresult = function(event: any) {\n                console.log(event.results)\n                var result = event.results[0]\n                if (result.isFinal) {\n                    send({\n                        type: \"ASRRESULT\", value:\n                            [{\n                                \"utterance\": result[0].transcript,\n                                \"confidence\": result[0].confidence\n                            }]\n                    })\n                } else {\n                    send({ type: \"STARTSPEECH\" });\n                }\n            }\n        }\n        fetchASRTTS()\n    }, []\n    )\n\n\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a voice input.');\n                startListening()\n                /* speechRecognition.start() */\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stopListening()\n            }),\n            ttsStart: asEffect((context) => {\n                console.log('Speaking...');\n                const voices = myTTS.getVoices();\n                console.log(voices)\n                const utterance = new myTTSUtterance(context.ttsAgenda);\n                utterance.voice = voices.find(voice => /en-US-AriaNeural/u.test(voice.name))!\n                utterance.onend = () => send('ENDSPEECH')\n                myTTS.speak(utterance)\n            }),\n            ttsCancel: asEffect(() => {\n                console.log('TTS STOP...');\n                /* cancel() */\n                speechSynthesis.cancel()\n            })\n            /* speak: asEffect((context) => {\n             * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n\n\n"],"sourceRoot":""}