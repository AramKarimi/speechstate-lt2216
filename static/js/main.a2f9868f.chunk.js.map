{"version":3,"sources":["tdmClient.ts","jaicpClient.ts","dmColourChanger.ts","index.tsx"],"names":["send","actions","assign","choose","startSession","tdmRequest","requestBody","fetch","Request","process","method","headers","body","JSON","stringify","then","data","json","tdmAssign","sessionId","_ctx","event","session","session_id","tdmUtterance","output","utterance","tdmVisualOutputInfo","visual_output","visual_information","tdmExpectedAlternatives","context","expected_input","alternatives","tdmPassivity","expected_passivity","tdmActions","maybeAlternatives","cond","type","tdmDmMachine","initial","states","init","on","CLICK","tdm","start","invoke","id","src","_evt","onDone","target","onError","utter","RECOGNISED","SELECT","hapticInput","value","TIMEOUT","prompt","entry","ENDSPEECH","_evnt","some","item","name","ask","next","hypotheses","recResult","nextHaptic","expression","passivity","fail","sessionID","Math","random","toString","substr","sayColour","ttsAgenda","answer","say","text","_context","dmMachine","welcome","stop","always","repaint","dm","cancel","REGION","inspect","url","iframe","machine","Machine","gui","micOnly","SHOW_PICTURES","pictureList","asrtts","getToken","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","voice","find","v","test","console","error","TTS_READY","TTS_ERROR","idle","LISTEN","SPEAK","recognising","exit","ASRRESULT","noinput","delay","STARTSPEECH","inprogress","match","pause","speaking","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","state","matches","className","style","visualOutput","el","attribute","animation","background","FigureButton","caption","alternative","imageSrc","alt","App","useMachine","devTools","recStart","asEffect","asr","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","filter","o","map","i","onClick","semantic_expression","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a2f9868f.chunk.js","sourcesContent":["import { MachineConfig, actions, AssignAction } from \"xstate\";\n\nconst { send, assign, choose } = actions;\n\n\nconst tdmEndpoint = process.env.REACT_APP_TDM_ENDPOINT || \"https://sourdough-for-dummies-orchestration-pipeline.eu2.ddd.tala.cloud/interact\"\nconst tdmSession = {\n    \"session\": {\n        \"my_frontend\": {\n            \"user_id\": \"speechstate\",\n            \"position\": {\n                \"latitude\": \"57.699188\",\n                \"longitude\": \"11.948313\"\n            }\n        }\n    }\n}\n\nconst startSession = {\n    \"version\": \"3.3\",\n    \"session\": tdmSession,\n    \"request\": {\n        \"start_session\": {}\n    }\n}\n\nconst passivity = (sessionId: string) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"passivity\": {}\n    }\n})\n\nconst nlInput = (sessionId: string, hypotheses: Hypothesis[]) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"natural_language_input\": {\n            \"modality\": \"speech\",\n            \"hypotheses\": hypotheses\n        }\n    }\n})\n\nconst hapticInput = (sessionId: string, expression: string) => ({\n    \"version\": \"3.3\",\n    \"session\": { \"session_id\": sessionId },\n    \"request\": {\n        \"semantic_input\": {\n            \"interpretations\": [{\n                \"modality\": \"haptic\",\n                \"moves\": [{\n                    \"perception_confidence\": 1,\n                    \"understanding_confidence\": 1,\n                    \"semantic_expression\": expression\n                }]\n            }]\n        }\n    }\n})\n\nconst tdmRequest = (requestBody: any) => (fetch(new Request(tdmEndpoint, {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify(requestBody)\n})).then(data => data.json()))\n\nconst tdmAssign: AssignAction<SDSContext, any> = assign({\n    sessionId: (_ctx, event) => event.data.session.session_id,\n    tdmUtterance: (_ctx, event) => event.data.output.utterance,\n    tdmVisualOutputInfo: (_ctx, event) => (event.data.output.visual_output || [{}])[0].visual_information,\n    tdmExpectedAlternatives: (_ctx, event) => (event.data.context.expected_input || {}).alternatives,\n    tdmPassivity: (_ctx, event) => event.data.output.expected_passivity,\n    tdmActions: (_ctx, event) => event.data.output.actions,\n})\n\n\nconst maybeAlternatives = choose<SDSContext, SDSEvent>([\n    {\n        cond: (context) => { return (context.tdmExpectedAlternatives || [{}])[0].visual_information },\n        actions: [send({ type: \"SHOW_PICTURES\" })]\n    },\n])\n\nexport const tdmDmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'tdm'\n            }\n        },\n        tdm: {\n            initial: 'start',\n            states: {\n                start: {\n                    invoke: {\n                        id: \"startSession\",\n                        src: (_ctx, _evt) => tdmRequest(startSession),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                utter: {\n                    initial: 'prompt',\n                    on: {\n                        RECOGNISED: 'next',\n                        SELECT: {\n                            target: 'nextHaptic',\n                            actions: assign({ hapticInput: (_ctx, event) => event.value })\n                        },\n                        TIMEOUT: 'passivity'\n                    },\n                    states: {\n                        prompt: {\n                            entry: [\n                                maybeAlternatives,\n                                send((context: SDSContext) => ({\n                                    type: \"SPEAK\", value: context.tdmUtterance\n                                }))],\n                            on: {\n                                ENDSPEECH:\n                                    [\n                                        {\n                                            target: '#root.dm.init',\n                                            cond: (context, _evnt) => context.tdmActions.some((item: any) => item.name === 'EndSession')\n                                        },\n                                        { target: 'ask' }\n                                    ]\n\n                            }\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                    }\n                },\n                next: {\n                    invoke: {\n                        id: \"nlInput\",\n                        src: (context, _evt) => tdmRequest(nlInput(context.sessionId, context.recResult)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                nextHaptic: {\n                    invoke: {\n                        id: \"hapticInput\",\n                        src: (context, _evt) => tdmRequest(hapticInput(context.sessionId, context.hapticInput)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n                },\n                passivity: {\n                    invoke: {\n                        id: \"passivity\",\n                        src: (context, _evt) => tdmRequest(passivity(context.sessionId)),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions: tdmAssign,\n                                cond: (_ctx, event) => event.data.output\n                            },\n                            {\n                                target: 'fail'\n                            }\n                        ],\n                        onError: { target: 'fail' }\n                    }\n\n                },\n                fail: {}\n            },\n        },\n    },\n});\n","import { MachineConfig, send, assign } from \"xstate\";\n\nconst jaicpToken = 'NRBTzSQe:69ae9a334ee112ff9a006af3639ed243ec38e431'\nconst jaicpEndpoint = \"https://bot.jaicp.com/chatapi/\" + jaicpToken\n\nconst ID = function() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal. from https://gist.github.com/gordonbrander/2230317\n    return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nconst sessionID = ID()\n\nconst jaicpRequest = (query: string) => (fetch(new Request(jaicpEndpoint, {\n    method: 'POST',\n    headers: {\n        'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"clientId\": \"speechstate_\" + sessionID,\n        \"query\": query,\n    })\n})).then(data => data.json()))\n\n\nexport const jaicpDmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            entry: assign({\n                ttsAgenda: (_ctx, event) => \"Привет! Спроси меня что-нибудь.\"\n            }),\n            on: {\n                CLICK: 'jaicp'\n            }\n        },\n        jaicp: {\n            initial: 'utter',\n            states: {\n                utter: {\n                    initial: 'prompt',\n                    states: {\n                        prompt: {\n                            entry: send((context: SDSContext) => ({\n                                type: \"SPEAK\", value: context.ttsAgenda\n                            })),\n                            on: { ENDSPEECH: 'ask' },\n                        },\n                        ask: {\n                            entry: send('LISTEN')\n                        },\n                    },\n                    on: {\n                        RECOGNISED: 'next',\n                        // TIMEOUT: 'passivity'\n                    },\n                },\n                next: {\n                    invoke: {\n                        id: \"nlInput\",\n                        src: (context, _evt) => jaicpRequest(context.recResult[0].utterance),\n                        onDone: [\n                            {\n                                target: 'utter',\n                                actions:\n                                    assign({\n                                        ttsAgenda: (_ctx, event) => event.data.data.answer,\n                                    }),\n                                cond: (_ctx, event) => event.data.data.answer !== \"\"\n                            },\n                            {\n                                target: '#root.dm.fail'\n                            }\n                        ],\n                        onError: { target: '#root.dm.fail' }\n                    }\n\n                },\n            },\n        },\n        fail: {}\n    },\n});\n","import { MachineConfig, send, Action } from \"xstate\";\n\n\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Repainting to ${context.recResult[0].utterance}`\n}))\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: 'prompt',\n            on: {\n                RECOGNISED: [\n                    // { target: 'stop', cond: (context) => context.recResult === 'stop' },\n                    { target: 'repaint' }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Tell me the colour\"),\n                    on: { ENDSPEECH: 'ask' }\n                },\n                ask: {\n                    entry: send('LISTEN'),\n                },\n            }\n        },\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n        repaint: {\n            initial: 'prompt',\n            states: {\n                prompt: {\n                    entry: sayColour,\n                    on: { ENDSPEECH: 'repaint' }\n                },\n                repaint: {\n                    entry: 'changeColour',\n                    always: '#root.dm.welcome'\n                }\n            }\n        }\n    }\n})\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, actions, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { tdmDmMachine } from \"./tdmClient\";\nimport { jaicpDmMachine } from \"./jaicpClient\";\nimport { dmMachine } from \"./dmColourChanger\";\n\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\n\nlet dm = dmMachine\nif (process.env.REACT_APP_BACKEND === 'TDM') {\n    dm = tdmDmMachine\n} else if (process.env.REACT_APP_BACKEND === 'JAICP') {\n    dm = jaicpDmMachine\n}\n\n\nconst { send, cancel } = actions\n\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\nconst REGION = 'northeurope';\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\n\nconst defaultPassivity = 10\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dm\n        },\n\n        gui: {\n            initial: 'micOnly',\n\n            states: {\n                micOnly: {\n                    on: { SHOW_PICTURES: 'pictureList' },\n                },\n                pictureList: {\n                    on: { SELECT: 'micOnly' },\n                }\n            }\n        },\n\n        asrtts: {\n            initial: 'getToken',\n            states: {\n                getToken: {\n                    invoke: {\n                        id: \"getAuthorizationToken\",\n                        src: (_ctx, _evt) => getAuthorizationToken(),\n                        onDone: {\n                            actions: [\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\n                                'ponyfillASR'],\n                            target: 'ponyfillTTS'\n                        },\n                        onError: {\n                            target: 'fail'\n                        }\n                    }\n                },\n                ponyfillTTS: {\n                    invoke: {\n                        id: 'ponyTTS',\n                        src: (context, _event) => (callback, _onReceive) => {\n                            const ponyfill = createSpeechSynthesisPonyfill({\n                                credentials: {\n                                    region: REGION,\n                                    authorizationToken: context.azureAuthorizationToken,\n                                }\n                            });\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\n                            context.tts = speechSynthesis\n                            context.ttsUtterance = SpeechSynthesisUtterance\n                            context.tts.addEventListener('voiceschanged', () => {\n                                context.tts.cancel()\n                                const voices = context.tts.getVoices();\n                                let voiceRe = RegExp(\"en-US\", 'u')\n                                if (process.env.REACT_APP_TTS_VOICE) {\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\n                                }\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\n                                if (voice) {\n                                    context.voice = voice\n                                    callback('TTS_READY')\n                                } else {\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\n                                    callback('TTS_ERROR')\n                                }\n                            })\n                        }\n                    },\n                    on: {\n                        TTS_READY: 'idle',\n                        TTS_ERROR: 'fail'\n                    }\n                },\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    },\n                },\n                recognising: {\n                    initial: 'noinput',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => {\n                                    return {\n                                        recResult: event.value\n                                    }\n                                })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle',\n                        SELECT: 'idle',\n                        CLICK: '.pause'\n                    },\n                    states: {\n                        noinput: {\n                            entry: [\n                                'recStart',\n                                send(\n                                    { type: 'TIMEOUT' },\n                                    { delay: (context) => (1000 * (defaultPassivity || context.tdmPassivity)), id: 'timeout' }\n                                )],\n                            on: {\n                                TIMEOUT: '#root.asrtts.idle',\n                                STARTSPEECH: 'inprogress'\n                            },\n                            exit: cancel('timeout')\n                        },\n                        inprogress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                        pause: {\n                            entry: 'recStop',\n                            on: { CLICK: 'noinput' }\n                        }\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                        SELECT: 'idle',\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\n                    },\n                    exit: 'ttsStop',\n                },\n                fail: {}\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult[0][\"utterance\"]);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    alternative: any;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\n            return (\n                <div className=\"control\">\n                    <div className=\"status\">Something went wrong...</div>\n                    <button type=\"button\" className=\"circle\"\n                        style={{}} {...props}>\n                    </button>\n                </div>);\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\n            return (\n                <div className=\"control\" {...props}>\n                    <div className=\"status-talk\">click to continue</div>\n                    <button type=\"button\" className=\"circle\"\n                        style={{}}>\n                    </button>\n                </div>\n            );\n        case props.state.matches({ asrtts: 'recognising' }):\n            const visualOutput = props.state.context.tdmVisualOutputInfo || []\n            return (\n                <div className=\"control\">\n                    <div className=\"status-talk\">\n                        {\n                            (visualOutput.find(\n                                (el: any) => el.attribute === \"text\") || { value: \"listening...\" }).value\n                        }\n                    </div>\n                    <button type=\"button\" className=\"circle\"\n                        style={{ animation: \"bordersize 2s infinite\" }} {...props}>\n                    </button>\n                </div>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <div className=\"control\">\n                    <div className=\"status\">speaking...</div>\n                    <button type=\"button\" className=\"circle-speaking\"\n                        style={{ animation: \"bordering 2s infinite\" }} {...props}>\n                    </button>\n                </div>\n            );\n        case props.state.matches({ dm: 'init' }):\n            return (\n                <div className=\"control\" {...props}>\n                    <div className=\"status-talk\">click to start!</div>\n                    <button type=\"button\" className=\"circle-click\"\n                        style={{}}>\n                    </button>\n                </div>\n            );\n\n        default:\n            return (\n                <div className=\"control\">\n                    <div className=\"status-talk\"></div>\n                    <button type=\"button\" className=\"circle\"\n                        style={{ background: \"#fff\" }} {...props}>\n                    </button>\n                </div>\n            );\n    }\n}\n\nconst FigureButton = (props: Props): JSX.Element => {\n    console.log(props)\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\n    return (\n        <figure className=\"flex\" {...props}>\n            {imageSrc &&\n                <img src={imageSrc} alt={caption} />}\n            <figcaption>{caption}</figcaption>\n        </figure>\n    )\n}\n\nfunction App() {\n    const [current, send] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect((context) => {\n                console.log('Ready to receive a voice input.');\n                context.asr.start()\n            }),\n            recStop: asEffect((context) => {\n                console.log('Recognition stopped.');\n                context.asr.abort()\n            }),\n            ttsStart: asEffect((context) => {\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\n                utterance.voice = context.voice\n                utterance.onend = () => send('ENDSPEECH')\n                context.tts.speak(utterance)\n            }),\n            ttsStop: asEffect((context) => {\n                console.log('TTS STOP...');\n                /* cancel() */\n                context.tts.cancel()\n            }),\n            ponyfillASR: asEffect((context, _event) => {\n                const\n                    { SpeechRecognition }\n                        = createSpeechRecognitionPonyfill({\n                            credentials: {\n                                region: REGION,\n                                authorizationToken: context.azureAuthorizationToken,\n                            }\n                        });\n                context.asr = new SpeechRecognition()\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\n                context.asr.continuous = true\n                context.asr.interimResults = true\n                context.asr.onresult = function(event: any) {\n                    var result = event.results[0]\n                    if (result.isFinal) {\n                        send({\n                            type: \"ASRRESULT\", value:\n                                [{\n                                    \"utterance\": result[0].transcript,\n                                    \"confidence\": result[0].confidence\n                                }]\n                        })\n                    } else {\n                        send({ type: \"STARTSPEECH\" });\n                    }\n                }\n\n            })\n        }\n    });\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\n        .map(\n            (o: any, i: any) => (\n                <FigureButton state={current}\n                    alternative={o.visual_information}\n                    key={i}\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\n            )\n        )\n\n    if (current.matches({ gui: 'pictureList' })) {\n        return (\n            <div className=\"App\">\n                <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n                <div className=\"select-wrapper\">\n                    <div className=\"select\">\n                        {figureButtons}\n                    </div>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"App\">\n                <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\n            </div>\n        )\n    }\n\n};\n\nconst getAuthorizationToken = () => (\n    fetch(new Request(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\n        },\n    })).then(data => data.text()))\n\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}